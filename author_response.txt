We thank the reviewers for their comments, references and very
constructive feedback. We look forward to applying their
recommendations. Below we address some of the major
concerns/questions:


Review 3

> What about "normal" programs?
> Can you prove a permissiveness theorem?

In the related work section, we describe how to encode
no-sensitive-upgrades in our flow-sensitive (FS) calculus.  As a
result, we can say that it is at least as permissive as
no-sensitive-upgrades.  (Though we do not prove this formally---in
part, due to the lack of space---we do not expect any major problems
in doing so.) With respect to our own work, our FS calculus is as
permissive as flow-insensitive (FI) LIO. Any FI LIO program can be
trivially converted to a FS LIO program (without auto-upgrades) by
using flow-sensitive references instead of flow-insensitive ones.
Since these references would never be upgraded, they will behave just
like their flow-insensitive counterparts.

As an example of a "normal" program that could be run in our
flow-sensitive monitor, we highlight Hails [Giffin], a web framework
using LIO, on top of which a number of applications have been built
(e.g., GitStar, a code-hosting web platform, LearnByHacking, a
blog/tutorial platform similar to School of Haskell, and LambdaChair,
an EasyChair-like conference review system).  GitStar's core could be
run in our flow-sensitive monitor; the full system uses other features
like privileges and exceptions that we have not directly implemented
in this version of the flow-sensitive monitor, but we see no major
challenges in incorporating flow-sensitivity to the full version of LIO.

In fact, we are using the flow-sensitivity result from this paper to
improve the Hails database interface. We intend to expand on this, but
for simplicity consider the blog app LearnByHacking (though this
similarly applies to GitStar), where a user may want to make a blog
post public or private. This change amounts to modifying the policy
(label) on the post; Hails currently implements a conservative
'update' function that has explicit label checks ensuring that only
the (code running on behalf of the) owner of the post can modify the
post policy. By using the semantics of the FS references we can
remove the label, but somewhat ad-hoc, checks in 'update': the label
of the reference serves as the policy on who can modify the label of
the post!


Finally, we do agree with the reviewer in threading the logging
application through the rest of the paper to give a better intuition
for both the safety ad permissiveness of the approach.

Review 4

> ... I don't feel that it does a good job of exposing the problem. ...

We note that while the SSA approach to handling the register
allocation problem is a very good way to address the problem, other
work has considered flow-sensitive as an alternative viable solution.
Our work complements these latter approaches.

However, we welcome the feedback and will revise the intro to both
include better examples and other motivation. In particular, we find
the FS approach to addressing the policy update concern in Hails
(described above) a very appealing and clean solution, especially
since it generalizes beyond the Hails use case.

> What would be the major challenges in
> proving correctness of the semantics mechanically?

We encoded a large part of the FI LIO and non-interference theorems
in Coq [CoqLIO]. Based on this experience, and similar efforts on
Breeze [Hritcu], we see no major problems with writing mechanising our
result.

> Sec I: I don't understand how the program in Fig. 1 illustrates how
> label changes are used as a covert channel. The program seems to
> illustrate an implicit flow based on control flow, but the label of no
> variable is changed, and in particular the label of variable "t" is
> not changed from "H" to "L", as claimed in the discussion of the
> example.

That's a bug: "t" changes from "L" to "H"

> Sec. II A: the paragraph on monadic terms does not give a good
> motivation for the need for monads. In particular, the explanation of
> "return" and "bind" does not explain why they are needed over simply
> pure terms and term application, respectively.

We included "return" and "bind" mainly for consistency with the previous
description of LIO, but we will consider simplifying this as suggested.

> Sec. III: Why is it impractical to assume that practical IFC systems
> do not include a top element? This seems odd, given that several of
> the inference rules in the paper rely on a join operation, so it seems
> like the labels should form a join-semilattice.

LIO is polymorphic in the label type; labels forming a
join-semilattice is necessary.  We belove that assuming the existence
of a top element to be an unnecessary restriction: HiStar labels and
variants of the DCLabels (e.g., based on sets) do not have a top
element. We will adjust the language to express this concern
('impractical' is too strong).

> Sec. III: In the rule for writeRefFS, I could not get a good intuition
> for why the side condition is "l_{cur} flows-to l join l'" and not,
> say, "l_{cur} flows-to l AND l_{cur} flows-to l'."
>
> Sec. V A: I think that the explanation of the embedding here could
> strongly benefit from some discussion of the non-trivial rewrite rules
> in Fig. 13, in particular the rule for writeRefFS.

The condition "l_{cur} flows-to l join l'" holds because the label
"l'" always flows to "l". However, in the embedding the "label" and
"writeRefFI" actions effectively impose the condition you are
suggesting: "l_{cur} flows-to l AND l_{cur} flows-to l'". We will
revise the rule and, as suggested, expand the embedding discussion.


References
----------

[CoqLIO] https://github.com/deian/lio-semantics

[Hritcu] Cătălin Hriţcu, Michael Greenberg, Ben Karel, Benjamin C.
Pierce, Greg Morrisett. All Your IFCException Are Belong To Us. In
34th IEEE Symposium on Security and Privacy (Oakland), pages 3-17,
IEEE Computer Society Press, May 2013. 

[Giffin] Daniel B. Giffin, Amit Levy, Deian Stefan, David Terei,
David Mazières, John Mitchell, Alejandro Russo . Hails: Protecting
Data Privacy in Untrusted Web Applications. In Proceedings of 10th
Symposium on Operating Systems Design and Implementation (OSDI) ,
USENIX. 2012.


